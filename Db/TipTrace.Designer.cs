//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_Share_ShareSession", "ShareSession", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Db.ShareSession), "Share", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.Share), true)]
[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_Share_SourceType", "SourceType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Db.SourceType), "Share", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.Share), true)]
[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_ShareClick_Share", "Share", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Db.Share), "ShareClick", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.ShareClick), true)]
[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_ShareSession_Url", "Url", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Db.Url), "ShareSession", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.ShareSession), true)]
[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_ShareSession_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Db.User), "ShareSession", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.ShareSession), true)]
[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_UserSource_SourceType", "SourceType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Db.SourceType), "UserSource", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.UserSource), true)]
[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_UserSource_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Db.User), "UserSource", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.UserSource), true)]
[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_UrlView_Url", "Url", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Db.Url), "UrlView", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.UrlView), true)]
[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_Client_ClientType", "ClientType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Db.ClientType), "Client", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.Client), true)]
[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_ShareSession_Client", "Client", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Db.Client), "ShareSession", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.ShareSession), true)]
[assembly: EdmRelationshipAttribute("TipTraceModel", "FK_UrlView_Client", "Client", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Db.Client), "UrlView", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Db.UrlView), true)]

#endregion

namespace Db
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class TipTraceEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new TipTraceEntities object using the connection string found in the 'TipTraceEntities' section of the application configuration file.
        /// </summary>
        public TipTraceEntities() : base("name=TipTraceEntities", "TipTraceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TipTraceEntities object.
        /// </summary>
        public TipTraceEntities(string connectionString) : base(connectionString, "TipTraceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TipTraceEntities object.
        /// </summary>
        public TipTraceEntities(EntityConnection connection) : base(connection, "TipTraceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ClientType> ClientTypes
        {
            get
            {
                if ((_ClientTypes == null))
                {
                    _ClientTypes = base.CreateObjectSet<ClientType>("ClientTypes");
                }
                return _ClientTypes;
            }
        }
        private ObjectSet<ClientType> _ClientTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Share> Shares
        {
            get
            {
                if ((_Shares == null))
                {
                    _Shares = base.CreateObjectSet<Share>("Shares");
                }
                return _Shares;
            }
        }
        private ObjectSet<Share> _Shares;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ShareClick> ShareClicks
        {
            get
            {
                if ((_ShareClicks == null))
                {
                    _ShareClicks = base.CreateObjectSet<ShareClick>("ShareClicks");
                }
                return _ShareClicks;
            }
        }
        private ObjectSet<ShareClick> _ShareClicks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ShareSession> ShareSessions
        {
            get
            {
                if ((_ShareSessions == null))
                {
                    _ShareSessions = base.CreateObjectSet<ShareSession>("ShareSessions");
                }
                return _ShareSessions;
            }
        }
        private ObjectSet<ShareSession> _ShareSessions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SourceType> SourceTypes
        {
            get
            {
                if ((_SourceTypes == null))
                {
                    _SourceTypes = base.CreateObjectSet<SourceType>("SourceTypes");
                }
                return _SourceTypes;
            }
        }
        private ObjectSet<SourceType> _SourceTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Url> Urls
        {
            get
            {
                if ((_Urls == null))
                {
                    _Urls = base.CreateObjectSet<Url>("Urls");
                }
                return _Urls;
            }
        }
        private ObjectSet<Url> _Urls;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserSource> UserSources
        {
            get
            {
                if ((_UserSources == null))
                {
                    _UserSources = base.CreateObjectSet<UserSource>("UserSources");
                }
                return _UserSources;
            }
        }
        private ObjectSet<UserSource> _UserSources;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UrlView> UrlViews
        {
            get
            {
                if ((_UrlViews == null))
                {
                    _UrlViews = base.CreateObjectSet<UrlView>("UrlViews");
                }
                return _UrlViews;
            }
        }
        private ObjectSet<UrlView> _UrlViews;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Setting> Settings
        {
            get
            {
                if ((_Settings == null))
                {
                    _Settings = base.CreateObjectSet<Setting>("Settings");
                }
                return _Settings;
            }
        }
        private ObjectSet<Setting> _Settings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Client> Clients
        {
            get
            {
                if ((_Clients == null))
                {
                    _Clients = base.CreateObjectSet<Client>("Clients");
                }
                return _Clients;
            }
        }
        private ObjectSet<Client> _Clients;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ClientTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClientTypes(ClientType clientType)
        {
            base.AddObject("ClientTypes", clientType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Shares EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToShares(Share share)
        {
            base.AddObject("Shares", share);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ShareClicks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToShareClicks(ShareClick shareClick)
        {
            base.AddObject("ShareClicks", shareClick);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ShareSessions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToShareSessions(ShareSession shareSession)
        {
            base.AddObject("ShareSessions", shareSession);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SourceTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSourceTypes(SourceType sourceType)
        {
            base.AddObject("SourceTypes", sourceType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Urls EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUrls(Url url)
        {
            base.AddObject("Urls", url);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserSources EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserSources(UserSource userSource)
        {
            base.AddObject("UserSources", userSource);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UrlViews EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUrlViews(UrlView urlView)
        {
            base.AddObject("UrlViews", urlView);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Settings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSettings(Setting setting)
        {
            base.AddObject("Settings", setting);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Clients EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClients(Client client)
        {
            base.AddObject("Clients", client);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userHash">No Metadata Documentation available.</param>
        /// <param name="sourceTypeId">No Metadata Documentation available.</param>
        /// <param name="identifier">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="token">No Metadata Documentation available.</param>
        /// <param name="tokenSecret">No Metadata Documentation available.</param>
        /// <param name="verifier">No Metadata Documentation available.</param>
        /// <param name="refreshToken">No Metadata Documentation available.</param>
        public ObjectResult<User> ProcessToken(global::System.String userHash, Nullable<global::System.Int32> sourceTypeId, global::System.String identifier, global::System.String name, global::System.String token, global::System.String tokenSecret, global::System.String verifier, global::System.String refreshToken)
        {
            ObjectParameter userHashParameter;
            if (userHash != null)
            {
                userHashParameter = new ObjectParameter("UserHash", userHash);
            }
            else
            {
                userHashParameter = new ObjectParameter("UserHash", typeof(global::System.String));
            }
    
            ObjectParameter sourceTypeIdParameter;
            if (sourceTypeId.HasValue)
            {
                sourceTypeIdParameter = new ObjectParameter("SourceTypeId", sourceTypeId);
            }
            else
            {
                sourceTypeIdParameter = new ObjectParameter("SourceTypeId", typeof(global::System.Int32));
            }
    
            ObjectParameter identifierParameter;
            if (identifier != null)
            {
                identifierParameter = new ObjectParameter("Identifier", identifier);
            }
            else
            {
                identifierParameter = new ObjectParameter("Identifier", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter tokenParameter;
            if (token != null)
            {
                tokenParameter = new ObjectParameter("Token", token);
            }
            else
            {
                tokenParameter = new ObjectParameter("Token", typeof(global::System.String));
            }
    
            ObjectParameter tokenSecretParameter;
            if (tokenSecret != null)
            {
                tokenSecretParameter = new ObjectParameter("TokenSecret", tokenSecret);
            }
            else
            {
                tokenSecretParameter = new ObjectParameter("TokenSecret", typeof(global::System.String));
            }
    
            ObjectParameter verifierParameter;
            if (verifier != null)
            {
                verifierParameter = new ObjectParameter("Verifier", verifier);
            }
            else
            {
                verifierParameter = new ObjectParameter("Verifier", typeof(global::System.String));
            }
    
            ObjectParameter refreshTokenParameter;
            if (refreshToken != null)
            {
                refreshTokenParameter = new ObjectParameter("RefreshToken", refreshToken);
            }
            else
            {
                refreshTokenParameter = new ObjectParameter("RefreshToken", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<User>("ProcessToken", userHashParameter, sourceTypeIdParameter, identifierParameter, nameParameter, tokenParameter, tokenSecretParameter, verifierParameter, refreshTokenParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userHash">No Metadata Documentation available.</param>
        /// <param name="sourceTypeId">No Metadata Documentation available.</param>
        /// <param name="identifier">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="token">No Metadata Documentation available.</param>
        /// <param name="tokenSecret">No Metadata Documentation available.</param>
        /// <param name="verifier">No Metadata Documentation available.</param>
        /// <param name="refreshToken">No Metadata Documentation available.</param>
        public ObjectResult<User> ProcessToken(global::System.String userHash, Nullable<global::System.Int32> sourceTypeId, global::System.String identifier, global::System.String name, global::System.String token, global::System.String tokenSecret, global::System.String verifier, global::System.String refreshToken, MergeOption mergeOption)
        {
            ObjectParameter userHashParameter;
            if (userHash != null)
            {
                userHashParameter = new ObjectParameter("UserHash", userHash);
            }
            else
            {
                userHashParameter = new ObjectParameter("UserHash", typeof(global::System.String));
            }
    
            ObjectParameter sourceTypeIdParameter;
            if (sourceTypeId.HasValue)
            {
                sourceTypeIdParameter = new ObjectParameter("SourceTypeId", sourceTypeId);
            }
            else
            {
                sourceTypeIdParameter = new ObjectParameter("SourceTypeId", typeof(global::System.Int32));
            }
    
            ObjectParameter identifierParameter;
            if (identifier != null)
            {
                identifierParameter = new ObjectParameter("Identifier", identifier);
            }
            else
            {
                identifierParameter = new ObjectParameter("Identifier", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter tokenParameter;
            if (token != null)
            {
                tokenParameter = new ObjectParameter("Token", token);
            }
            else
            {
                tokenParameter = new ObjectParameter("Token", typeof(global::System.String));
            }
    
            ObjectParameter tokenSecretParameter;
            if (tokenSecret != null)
            {
                tokenSecretParameter = new ObjectParameter("TokenSecret", tokenSecret);
            }
            else
            {
                tokenSecretParameter = new ObjectParameter("TokenSecret", typeof(global::System.String));
            }
    
            ObjectParameter verifierParameter;
            if (verifier != null)
            {
                verifierParameter = new ObjectParameter("Verifier", verifier);
            }
            else
            {
                verifierParameter = new ObjectParameter("Verifier", typeof(global::System.String));
            }
    
            ObjectParameter refreshTokenParameter;
            if (refreshToken != null)
            {
                refreshTokenParameter = new ObjectParameter("RefreshToken", refreshToken);
            }
            else
            {
                refreshTokenParameter = new ObjectParameter("RefreshToken", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<User>("ProcessToken", mergeOption, userHashParameter, sourceTypeIdParameter, identifierParameter, nameParameter, tokenParameter, tokenSecretParameter, verifierParameter, refreshTokenParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userHash">No Metadata Documentation available.</param>
        /// <param name="urlId">No Metadata Documentation available.</param>
        /// <param name="clientHash">No Metadata Documentation available.</param>
        /// <param name="message">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> SaveShareSession(global::System.String userHash, Nullable<global::System.Int32> urlId, global::System.String clientHash, global::System.String message)
        {
            ObjectParameter userHashParameter;
            if (userHash != null)
            {
                userHashParameter = new ObjectParameter("UserHash", userHash);
            }
            else
            {
                userHashParameter = new ObjectParameter("UserHash", typeof(global::System.String));
            }
    
            ObjectParameter urlIdParameter;
            if (urlId.HasValue)
            {
                urlIdParameter = new ObjectParameter("UrlId", urlId);
            }
            else
            {
                urlIdParameter = new ObjectParameter("UrlId", typeof(global::System.Int32));
            }
    
            ObjectParameter clientHashParameter;
            if (clientHash != null)
            {
                clientHashParameter = new ObjectParameter("ClientHash", clientHash);
            }
            else
            {
                clientHashParameter = new ObjectParameter("ClientHash", typeof(global::System.String));
            }
    
            ObjectParameter messageParameter;
            if (message != null)
            {
                messageParameter = new ObjectParameter("Message", message);
            }
            else
            {
                messageParameter = new ObjectParameter("Message", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("SaveShareSession", userHashParameter, urlIdParameter, clientHashParameter, messageParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="count">No Metadata Documentation available.</param>
        public ObjectResult<global::System.String> GetUniqueUrlCodes(Nullable<global::System.Int32> count)
        {
            ObjectParameter countParameter;
            if (count.HasValue)
            {
                countParameter = new ObjectParameter("Count", count);
            }
            else
            {
                countParameter = new ObjectParameter("Count", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<global::System.String>("GetUniqueUrlCodes", countParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="userAgent">No Metadata Documentation available.</param>
        public ObjectResult<Url> GetUrlByCode(global::System.String code, global::System.String userAgent)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter userAgentParameter;
            if (userAgent != null)
            {
                userAgentParameter = new ObjectParameter("UserAgent", userAgent);
            }
            else
            {
                userAgentParameter = new ObjectParameter("UserAgent", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Url>("GetUrlByCode", codeParameter, userAgentParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="userAgent">No Metadata Documentation available.</param>
        public ObjectResult<Url> GetUrlByCode(global::System.String code, global::System.String userAgent, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter userAgentParameter;
            if (userAgent != null)
            {
                userAgentParameter = new ObjectParameter("UserAgent", userAgent);
            }
            else
            {
                userAgentParameter = new ObjectParameter("UserAgent", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Url>("GetUrlByCode", mergeOption, codeParameter, userAgentParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="shareSessionId">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="withEmailReward">No Metadata Documentation available.</param>
        /// <param name="withEmailUpdate">No Metadata Documentation available.</param>
        public int SaveFeedback(Nullable<global::System.Int32> shareSessionId, global::System.String email, Nullable<global::System.Boolean> withEmailReward, Nullable<global::System.Boolean> withEmailUpdate)
        {
            ObjectParameter shareSessionIdParameter;
            if (shareSessionId.HasValue)
            {
                shareSessionIdParameter = new ObjectParameter("ShareSessionId", shareSessionId);
            }
            else
            {
                shareSessionIdParameter = new ObjectParameter("ShareSessionId", typeof(global::System.Int32));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            ObjectParameter withEmailRewardParameter;
            if (withEmailReward.HasValue)
            {
                withEmailRewardParameter = new ObjectParameter("WithEmailReward", withEmailReward);
            }
            else
            {
                withEmailRewardParameter = new ObjectParameter("WithEmailReward", typeof(global::System.Boolean));
            }
    
            ObjectParameter withEmailUpdateParameter;
            if (withEmailUpdate.HasValue)
            {
                withEmailUpdateParameter = new ObjectParameter("WithEmailUpdate", withEmailUpdate);
            }
            else
            {
                withEmailUpdateParameter = new ObjectParameter("WithEmailUpdate", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("SaveFeedback", shareSessionIdParameter, emailParameter, withEmailRewardParameter, withEmailUpdateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="url">No Metadata Documentation available.</param>
        /// <param name="clientId">No Metadata Documentation available.</param>
        public ObjectResult<Url> GetUrlByValue(global::System.String url, Nullable<global::System.Int32> clientId)
        {
            ObjectParameter urlParameter;
            if (url != null)
            {
                urlParameter = new ObjectParameter("Url", url);
            }
            else
            {
                urlParameter = new ObjectParameter("Url", typeof(global::System.String));
            }
    
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Url>("GetUrlByValue", urlParameter, clientIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="url">No Metadata Documentation available.</param>
        /// <param name="clientId">No Metadata Documentation available.</param>
        public ObjectResult<Url> GetUrlByValue(global::System.String url, Nullable<global::System.Int32> clientId, MergeOption mergeOption)
        {
            ObjectParameter urlParameter;
            if (url != null)
            {
                urlParameter = new ObjectParameter("Url", url);
            }
            else
            {
                urlParameter = new ObjectParameter("Url", typeof(global::System.String));
            }
    
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Url>("GetUrlByValue", mergeOption, urlParameter, clientIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientTypeId">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="websiteUrl">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="password">No Metadata Documentation available.</param>
        public ObjectResult<global::System.String> SaveClient(Nullable<global::System.Int32> clientTypeId, global::System.String name, global::System.String websiteUrl, global::System.String email, global::System.String password)
        {
            ObjectParameter clientTypeIdParameter;
            if (clientTypeId.HasValue)
            {
                clientTypeIdParameter = new ObjectParameter("ClientTypeId", clientTypeId);
            }
            else
            {
                clientTypeIdParameter = new ObjectParameter("ClientTypeId", typeof(global::System.Int32));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter websiteUrlParameter;
            if (websiteUrl != null)
            {
                websiteUrlParameter = new ObjectParameter("WebsiteUrl", websiteUrl);
            }
            else
            {
                websiteUrlParameter = new ObjectParameter("WebsiteUrl", typeof(global::System.String));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<global::System.String>("SaveClient", clientTypeIdParameter, nameParameter, websiteUrlParameter, emailParameter, passwordParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientId">No Metadata Documentation available.</param>
        public ObjectResult<StatsResultDate> StatsViewsPerMonth(Nullable<global::System.Int32> clientId)
        {
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<StatsResultDate>("StatsViewsPerMonth", clientIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="count">No Metadata Documentation available.</param>
        /// <param name="clientId">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        public ObjectResult<StatsResultTop> StatsViewsTop(Nullable<global::System.Int32> count, Nullable<global::System.Int32> clientId, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate)
        {
            ObjectParameter countParameter;
            if (count.HasValue)
            {
                countParameter = new ObjectParameter("Count", count);
            }
            else
            {
                countParameter = new ObjectParameter("Count", typeof(global::System.Int32));
            }
    
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<StatsResultTop>("StatsViewsTop", countParameter, clientIdParameter, startDateParameter, endDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientId">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        public ObjectResult<StatsResultDate> StatsSharesPerDay(Nullable<global::System.Int32> clientId, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate)
        {
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<StatsResultDate>("StatsSharesPerDay", clientIdParameter, startDateParameter, endDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientId">No Metadata Documentation available.</param>
        public ObjectResult<StatsResultDate> StatsSharesPerMonth(Nullable<global::System.Int32> clientId)
        {
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<StatsResultDate>("StatsSharesPerMonth", clientIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="count">No Metadata Documentation available.</param>
        /// <param name="clientId">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        public ObjectResult<StatsResultTop> StatsSharesTop(Nullable<global::System.Int32> count, Nullable<global::System.Int32> clientId, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate)
        {
            ObjectParameter countParameter;
            if (count.HasValue)
            {
                countParameter = new ObjectParameter("Count", count);
            }
            else
            {
                countParameter = new ObjectParameter("Count", typeof(global::System.Int32));
            }
    
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<StatsResultTop>("StatsSharesTop", countParameter, clientIdParameter, startDateParameter, endDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientId">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        public ObjectResult<StatsResultDate> StatsClicksPerDay(Nullable<global::System.Int32> clientId, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate)
        {
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<StatsResultDate>("StatsClicksPerDay", clientIdParameter, startDateParameter, endDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientId">No Metadata Documentation available.</param>
        public ObjectResult<StatsResultDate> StatsClicksPerMonth(Nullable<global::System.Int32> clientId)
        {
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<StatsResultDate>("StatsClicksPerMonth", clientIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="count">No Metadata Documentation available.</param>
        /// <param name="clientId">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        public ObjectResult<StatsResultTop> StatsClicksTop(Nullable<global::System.Int32> count, Nullable<global::System.Int32> clientId, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate)
        {
            ObjectParameter countParameter;
            if (count.HasValue)
            {
                countParameter = new ObjectParameter("Count", count);
            }
            else
            {
                countParameter = new ObjectParameter("Count", typeof(global::System.Int32));
            }
    
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<StatsResultTop>("StatsClicksTop", countParameter, clientIdParameter, startDateParameter, endDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientId">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        public ObjectResult<StatsResultDate> StatsViewsPerDay(Nullable<global::System.Int32> clientId, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate)
        {
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<StatsResultDate>("StatsViewsPerDay", clientIdParameter, startDateParameter, endDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientId">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        /// <param name="urlId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> StatsViewsTotal(Nullable<global::System.Int32> clientId, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate, Nullable<global::System.Int32> urlId)
        {
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter urlIdParameter;
            if (urlId.HasValue)
            {
                urlIdParameter = new ObjectParameter("UrlId", urlId);
            }
            else
            {
                urlIdParameter = new ObjectParameter("UrlId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("StatsViewsTotal", clientIdParameter, startDateParameter, endDateParameter, urlIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientId">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        /// <param name="urlId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> StatsSharesTotal(Nullable<global::System.Int32> clientId, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate, Nullable<global::System.Int32> urlId)
        {
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter urlIdParameter;
            if (urlId.HasValue)
            {
                urlIdParameter = new ObjectParameter("UrlId", urlId);
            }
            else
            {
                urlIdParameter = new ObjectParameter("UrlId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("StatsSharesTotal", clientIdParameter, startDateParameter, endDateParameter, urlIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="clientId">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        /// <param name="urlId">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> StatsClicksTotal(Nullable<global::System.Int32> clientId, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate, Nullable<global::System.Int32> urlId)
        {
            ObjectParameter clientIdParameter;
            if (clientId.HasValue)
            {
                clientIdParameter = new ObjectParameter("ClientId", clientId);
            }
            else
            {
                clientIdParameter = new ObjectParameter("ClientId", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter urlIdParameter;
            if (urlId.HasValue)
            {
                urlIdParameter = new ObjectParameter("UrlId", urlId);
            }
            else
            {
                urlIdParameter = new ObjectParameter("UrlId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("StatsClicksTotal", clientIdParameter, startDateParameter, endDateParameter, urlIdParameter);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="Client")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Client : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Client object.
        /// </summary>
        /// <param name="clientId">Initial value of the ClientId property.</param>
        /// <param name="typeId">Initial value of the TypeId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="hash">Initial value of the Hash property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        /// <param name="dateEdited">Initial value of the DateEdited property.</param>
        /// <param name="isValidated">Initial value of the IsValidated property.</param>
        /// <param name="validateHash">Initial value of the ValidateHash property.</param>
        /// <param name="withEmailReward">Initial value of the WithEmailReward property.</param>
        /// <param name="withEmailUpdate">Initial value of the WithEmailUpdate property.</param>
        /// <param name="customStatus1">Initial value of the CustomStatus1 property.</param>
        /// <param name="customStatus2">Initial value of the CustomStatus2 property.</param>
        public static Client CreateClient(global::System.Int32 clientId, global::System.Int32 typeId, global::System.String name, global::System.String hash, global::System.DateTime dateAdded, global::System.DateTime dateEdited, global::System.Boolean isValidated, global::System.String validateHash, global::System.Boolean withEmailReward, global::System.Boolean withEmailUpdate, global::System.Boolean customStatus1, global::System.Boolean customStatus2)
        {
            Client client = new Client();
            client.ClientId = clientId;
            client.TypeId = typeId;
            client.Name = name;
            client.Hash = hash;
            client.DateAdded = dateAdded;
            client.DateEdited = dateEdited;
            client.IsValidated = isValidated;
            client.ValidateHash = validateHash;
            client.WithEmailReward = withEmailReward;
            client.WithEmailUpdate = withEmailUpdate;
            client.CustomStatus1 = customStatus1;
            client.CustomStatus2 = customStatus2;
            return client;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ClientId
        {
            get
            {
                return _ClientId;
            }
            set
            {
                if (_ClientId != value)
                {
                    OnClientIdChanging(value);
                    ReportPropertyChanging("ClientId");
                    _ClientId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ClientId");
                    OnClientIdChanged();
                }
            }
        }
        private global::System.Int32 _ClientId;
        partial void OnClientIdChanging(global::System.Int32 value);
        partial void OnClientIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TypeId
        {
            get
            {
                return _TypeId;
            }
            set
            {
                OnTypeIdChanging(value);
                ReportPropertyChanging("TypeId");
                _TypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TypeId");
                OnTypeIdChanged();
            }
        }
        private global::System.Int32 _TypeId;
        partial void OnTypeIdChanging(global::System.Int32 value);
        partial void OnTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WebsiteUrl
        {
            get
            {
                return _WebsiteUrl;
            }
            set
            {
                OnWebsiteUrlChanging(value);
                ReportPropertyChanging("WebsiteUrl");
                _WebsiteUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WebsiteUrl");
                OnWebsiteUrlChanged();
            }
        }
        private global::System.String _WebsiteUrl;
        partial void OnWebsiteUrlChanging(global::System.String value);
        partial void OnWebsiteUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Hash
        {
            get
            {
                return _Hash;
            }
            set
            {
                OnHashChanging(value);
                ReportPropertyChanging("Hash");
                _Hash = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Hash");
                OnHashChanged();
            }
        }
        private global::System.String _Hash;
        partial void OnHashChanging(global::System.String value);
        partial void OnHashChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] PasswordHash
        {
            get
            {
                return StructuralObject.GetValidValue(_PasswordHash);
            }
            set
            {
                OnPasswordHashChanging(value);
                ReportPropertyChanging("PasswordHash");
                _PasswordHash = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PasswordHash");
                OnPasswordHashChanged();
            }
        }
        private global::System.Byte[] _PasswordHash;
        partial void OnPasswordHashChanging(global::System.Byte[] value);
        partial void OnPasswordHashChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateEdited
        {
            get
            {
                return _DateEdited;
            }
            set
            {
                OnDateEditedChanging(value);
                ReportPropertyChanging("DateEdited");
                _DateEdited = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateEdited");
                OnDateEditedChanged();
            }
        }
        private global::System.DateTime _DateEdited;
        partial void OnDateEditedChanging(global::System.DateTime value);
        partial void OnDateEditedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsValidated
        {
            get
            {
                return _IsValidated;
            }
            set
            {
                OnIsValidatedChanging(value);
                ReportPropertyChanging("IsValidated");
                _IsValidated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsValidated");
                OnIsValidatedChanged();
            }
        }
        private global::System.Boolean _IsValidated;
        partial void OnIsValidatedChanging(global::System.Boolean value);
        partial void OnIsValidatedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ValidateHash
        {
            get
            {
                return _ValidateHash;
            }
            set
            {
                OnValidateHashChanging(value);
                ReportPropertyChanging("ValidateHash");
                _ValidateHash = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ValidateHash");
                OnValidateHashChanged();
            }
        }
        private global::System.String _ValidateHash;
        partial void OnValidateHashChanging(global::System.String value);
        partial void OnValidateHashChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean WithEmailReward
        {
            get
            {
                return _WithEmailReward;
            }
            set
            {
                OnWithEmailRewardChanging(value);
                ReportPropertyChanging("WithEmailReward");
                _WithEmailReward = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WithEmailReward");
                OnWithEmailRewardChanged();
            }
        }
        private global::System.Boolean _WithEmailReward;
        partial void OnWithEmailRewardChanging(global::System.Boolean value);
        partial void OnWithEmailRewardChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean WithEmailUpdate
        {
            get
            {
                return _WithEmailUpdate;
            }
            set
            {
                OnWithEmailUpdateChanging(value);
                ReportPropertyChanging("WithEmailUpdate");
                _WithEmailUpdate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WithEmailUpdate");
                OnWithEmailUpdateChanged();
            }
        }
        private global::System.Boolean _WithEmailUpdate;
        partial void OnWithEmailUpdateChanging(global::System.Boolean value);
        partial void OnWithEmailUpdateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DefaultTipMessage
        {
            get
            {
                return _DefaultTipMessage;
            }
            set
            {
                OnDefaultTipMessageChanging(value);
                ReportPropertyChanging("DefaultTipMessage");
                _DefaultTipMessage = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DefaultTipMessage");
                OnDefaultTipMessageChanged();
            }
        }
        private global::System.String _DefaultTipMessage;
        partial void OnDefaultTipMessageChanging(global::System.String value);
        partial void OnDefaultTipMessageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CustomEmailTemplate
        {
            get
            {
                return _CustomEmailTemplate;
            }
            set
            {
                OnCustomEmailTemplateChanging(value);
                ReportPropertyChanging("CustomEmailTemplate");
                _CustomEmailTemplate = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CustomEmailTemplate");
                OnCustomEmailTemplateChanged();
            }
        }
        private global::System.String _CustomEmailTemplate;
        partial void OnCustomEmailTemplateChanging(global::System.String value);
        partial void OnCustomEmailTemplateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CustomColor1
        {
            get
            {
                return _CustomColor1;
            }
            set
            {
                OnCustomColor1Changing(value);
                ReportPropertyChanging("CustomColor1");
                _CustomColor1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CustomColor1");
                OnCustomColor1Changed();
            }
        }
        private global::System.String _CustomColor1;
        partial void OnCustomColor1Changing(global::System.String value);
        partial void OnCustomColor1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CustomColor2
        {
            get
            {
                return _CustomColor2;
            }
            set
            {
                OnCustomColor2Changing(value);
                ReportPropertyChanging("CustomColor2");
                _CustomColor2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CustomColor2");
                OnCustomColor2Changed();
            }
        }
        private global::System.String _CustomColor2;
        partial void OnCustomColor2Changing(global::System.String value);
        partial void OnCustomColor2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CustomColor3
        {
            get
            {
                return _CustomColor3;
            }
            set
            {
                OnCustomColor3Changing(value);
                ReportPropertyChanging("CustomColor3");
                _CustomColor3 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CustomColor3");
                OnCustomColor3Changed();
            }
        }
        private global::System.String _CustomColor3;
        partial void OnCustomColor3Changing(global::System.String value);
        partial void OnCustomColor3Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CustomColor4
        {
            get
            {
                return _CustomColor4;
            }
            set
            {
                OnCustomColor4Changing(value);
                ReportPropertyChanging("CustomColor4");
                _CustomColor4 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CustomColor4");
                OnCustomColor4Changed();
            }
        }
        private global::System.String _CustomColor4;
        partial void OnCustomColor4Changing(global::System.String value);
        partial void OnCustomColor4Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CustomColor5
        {
            get
            {
                return _CustomColor5;
            }
            set
            {
                OnCustomColor5Changing(value);
                ReportPropertyChanging("CustomColor5");
                _CustomColor5 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CustomColor5");
                OnCustomColor5Changed();
            }
        }
        private global::System.String _CustomColor5;
        partial void OnCustomColor5Changing(global::System.String value);
        partial void OnCustomColor5Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CustomColor6
        {
            get
            {
                return _CustomColor6;
            }
            set
            {
                OnCustomColor6Changing(value);
                ReportPropertyChanging("CustomColor6");
                _CustomColor6 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CustomColor6");
                OnCustomColor6Changed();
            }
        }
        private global::System.String _CustomColor6;
        partial void OnCustomColor6Changing(global::System.String value);
        partial void OnCustomColor6Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CallbackUrl
        {
            get
            {
                return _CallbackUrl;
            }
            set
            {
                OnCallbackUrlChanging(value);
                ReportPropertyChanging("CallbackUrl");
                _CallbackUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CallbackUrl");
                OnCallbackUrlChanged();
            }
        }
        private global::System.String _CallbackUrl;
        partial void OnCallbackUrlChanging(global::System.String value);
        partial void OnCallbackUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean CustomStatus1
        {
            get
            {
                return _CustomStatus1;
            }
            set
            {
                OnCustomStatus1Changing(value);
                ReportPropertyChanging("CustomStatus1");
                _CustomStatus1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CustomStatus1");
                OnCustomStatus1Changed();
            }
        }
        private global::System.Boolean _CustomStatus1;
        partial void OnCustomStatus1Changing(global::System.Boolean value);
        partial void OnCustomStatus1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean CustomStatus2
        {
            get
            {
                return _CustomStatus2;
            }
            set
            {
                OnCustomStatus2Changing(value);
                ReportPropertyChanging("CustomStatus2");
                _CustomStatus2 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CustomStatus2");
                OnCustomStatus2Changed();
            }
        }
        private global::System.Boolean _CustomStatus2;
        partial void OnCustomStatus2Changing(global::System.Boolean value);
        partial void OnCustomStatus2Changed();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_Client_ClientType", "ClientType")]
        public ClientType ClientType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ClientType>("TipTraceModel.FK_Client_ClientType", "ClientType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ClientType>("TipTraceModel.FK_Client_ClientType", "ClientType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ClientType> ClientTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ClientType>("TipTraceModel.FK_Client_ClientType", "ClientType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ClientType>("TipTraceModel.FK_Client_ClientType", "ClientType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_ShareSession_Client", "ShareSession")]
        public EntityCollection<ShareSession> ShareSessions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ShareSession>("TipTraceModel.FK_ShareSession_Client", "ShareSession");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ShareSession>("TipTraceModel.FK_ShareSession_Client", "ShareSession", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_UrlView_Client", "UrlView")]
        public EntityCollection<UrlView> UrlViews
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UrlView>("TipTraceModel.FK_UrlView_Client", "UrlView");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UrlView>("TipTraceModel.FK_UrlView_Client", "UrlView", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="ClientType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ClientType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ClientType object.
        /// </summary>
        /// <param name="clientTypeId">Initial value of the ClientTypeId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="level">Initial value of the Level property.</param>
        public static ClientType CreateClientType(global::System.Int32 clientTypeId, global::System.String name, global::System.Int32 level)
        {
            ClientType clientType = new ClientType();
            clientType.ClientTypeId = clientTypeId;
            clientType.Name = name;
            clientType.Level = level;
            return clientType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ClientTypeId
        {
            get
            {
                return _ClientTypeId;
            }
            set
            {
                if (_ClientTypeId != value)
                {
                    OnClientTypeIdChanging(value);
                    ReportPropertyChanging("ClientTypeId");
                    _ClientTypeId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ClientTypeId");
                    OnClientTypeIdChanged();
                }
            }
        }
        private global::System.Int32 _ClientTypeId;
        partial void OnClientTypeIdChanging(global::System.Int32 value);
        partial void OnClientTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Level
        {
            get
            {
                return _Level;
            }
            set
            {
                OnLevelChanging(value);
                ReportPropertyChanging("Level");
                _Level = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Level");
                OnLevelChanged();
            }
        }
        private global::System.Int32 _Level;
        partial void OnLevelChanging(global::System.Int32 value);
        partial void OnLevelChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_Client_ClientType", "Client")]
        public EntityCollection<Client> Clients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Client>("TipTraceModel.FK_Client_ClientType", "Client");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Client>("TipTraceModel.FK_Client_ClientType", "Client", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="Setting")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Setting : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Setting object.
        /// </summary>
        /// <param name="settingId">Initial value of the SettingId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Setting CreateSetting(global::System.Int32 settingId, global::System.String name)
        {
            Setting setting = new Setting();
            setting.SettingId = settingId;
            setting.Name = name;
            return setting;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SettingId
        {
            get
            {
                return _SettingId;
            }
            set
            {
                if (_SettingId != value)
                {
                    OnSettingIdChanging(value);
                    ReportPropertyChanging("SettingId");
                    _SettingId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SettingId");
                    OnSettingIdChanged();
                }
            }
        }
        private global::System.Int32 _SettingId;
        partial void OnSettingIdChanging(global::System.Int32 value);
        partial void OnSettingIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="Share")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Share : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Share object.
        /// </summary>
        /// <param name="shareId">Initial value of the ShareId property.</param>
        /// <param name="shareSessionId">Initial value of the ShareSessionId property.</param>
        /// <param name="targetTypeId">Initial value of the TargetTypeId property.</param>
        /// <param name="targetId">Initial value of the TargetId property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        /// <param name="shareStatusID">Initial value of the ShareStatusID property.</param>
        /// <param name="shortUrl">Initial value of the ShortUrl property.</param>
        /// <param name="clickCount">Initial value of the ClickCount property.</param>
        public static Share CreateShare(global::System.Int32 shareId, global::System.Int32 shareSessionId, global::System.Int32 targetTypeId, global::System.String targetId, global::System.DateTime dateAdded, global::System.Int32 shareStatusID, global::System.String shortUrl, global::System.Int32 clickCount)
        {
            Share share = new Share();
            share.ShareId = shareId;
            share.ShareSessionId = shareSessionId;
            share.TargetTypeId = targetTypeId;
            share.TargetId = targetId;
            share.DateAdded = dateAdded;
            share.ShareStatusID = shareStatusID;
            share.ShortUrl = shortUrl;
            share.ClickCount = clickCount;
            return share;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ShareId
        {
            get
            {
                return _ShareId;
            }
            set
            {
                if (_ShareId != value)
                {
                    OnShareIdChanging(value);
                    ReportPropertyChanging("ShareId");
                    _ShareId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ShareId");
                    OnShareIdChanged();
                }
            }
        }
        private global::System.Int32 _ShareId;
        partial void OnShareIdChanging(global::System.Int32 value);
        partial void OnShareIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ShareSessionId
        {
            get
            {
                return _ShareSessionId;
            }
            set
            {
                OnShareSessionIdChanging(value);
                ReportPropertyChanging("ShareSessionId");
                _ShareSessionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ShareSessionId");
                OnShareSessionIdChanged();
            }
        }
        private global::System.Int32 _ShareSessionId;
        partial void OnShareSessionIdChanging(global::System.Int32 value);
        partial void OnShareSessionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TargetTypeId
        {
            get
            {
                return _TargetTypeId;
            }
            set
            {
                OnTargetTypeIdChanging(value);
                ReportPropertyChanging("TargetTypeId");
                _TargetTypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TargetTypeId");
                OnTargetTypeIdChanged();
            }
        }
        private global::System.Int32 _TargetTypeId;
        partial void OnTargetTypeIdChanging(global::System.Int32 value);
        partial void OnTargetTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TargetId
        {
            get
            {
                return _TargetId;
            }
            set
            {
                OnTargetIdChanging(value);
                ReportPropertyChanging("TargetId");
                _TargetId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TargetId");
                OnTargetIdChanged();
            }
        }
        private global::System.String _TargetId;
        partial void OnTargetIdChanging(global::System.String value);
        partial void OnTargetIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TargetName
        {
            get
            {
                return _TargetName;
            }
            set
            {
                OnTargetNameChanging(value);
                ReportPropertyChanging("TargetName");
                _TargetName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TargetName");
                OnTargetNameChanged();
            }
        }
        private global::System.String _TargetName;
        partial void OnTargetNameChanging(global::System.String value);
        partial void OnTargetNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ShareStatusID
        {
            get
            {
                return _ShareStatusID;
            }
            set
            {
                OnShareStatusIDChanging(value);
                ReportPropertyChanging("ShareStatusID");
                _ShareStatusID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ShareStatusID");
                OnShareStatusIDChanged();
            }
        }
        private global::System.Int32 _ShareStatusID;
        partial void OnShareStatusIDChanging(global::System.Int32 value);
        partial void OnShareStatusIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ShortUrl
        {
            get
            {
                return _ShortUrl;
            }
            set
            {
                OnShortUrlChanging(value);
                ReportPropertyChanging("ShortUrl");
                _ShortUrl = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ShortUrl");
                OnShortUrlChanged();
            }
        }
        private global::System.String _ShortUrl;
        partial void OnShortUrlChanging(global::System.String value);
        partial void OnShortUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ClickCount
        {
            get
            {
                return _ClickCount;
            }
            set
            {
                OnClickCountChanging(value);
                ReportPropertyChanging("ClickCount");
                _ClickCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClickCount");
                OnClickCountChanged();
            }
        }
        private global::System.Int32 _ClickCount;
        partial void OnClickCountChanging(global::System.Int32 value);
        partial void OnClickCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ShareStatus
        {
            get
            {
                return _ShareStatus;
            }
            set
            {
                OnShareStatusChanging(value);
                ReportPropertyChanging("ShareStatus");
                _ShareStatus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ShareStatus");
                OnShareStatusChanged();
            }
        }
        private global::System.String _ShareStatus;
        partial void OnShareStatusChanging(global::System.String value);
        partial void OnShareStatusChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_Share_ShareSession", "ShareSession")]
        public ShareSession ShareSession
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ShareSession>("TipTraceModel.FK_Share_ShareSession", "ShareSession").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ShareSession>("TipTraceModel.FK_Share_ShareSession", "ShareSession").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ShareSession> ShareSessionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ShareSession>("TipTraceModel.FK_Share_ShareSession", "ShareSession");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ShareSession>("TipTraceModel.FK_Share_ShareSession", "ShareSession", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_Share_SourceType", "SourceType")]
        public SourceType SourceType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SourceType>("TipTraceModel.FK_Share_SourceType", "SourceType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SourceType>("TipTraceModel.FK_Share_SourceType", "SourceType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SourceType> SourceTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SourceType>("TipTraceModel.FK_Share_SourceType", "SourceType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SourceType>("TipTraceModel.FK_Share_SourceType", "SourceType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_ShareClick_Share", "ShareClick")]
        public EntityCollection<ShareClick> ShareClicks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ShareClick>("TipTraceModel.FK_ShareClick_Share", "ShareClick");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ShareClick>("TipTraceModel.FK_ShareClick_Share", "ShareClick", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="ShareClick")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ShareClick : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ShareClick object.
        /// </summary>
        /// <param name="shareClickId">Initial value of the ShareClickId property.</param>
        /// <param name="shareId">Initial value of the ShareId property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        public static ShareClick CreateShareClick(global::System.Int32 shareClickId, global::System.Int32 shareId, global::System.DateTime dateAdded)
        {
            ShareClick shareClick = new ShareClick();
            shareClick.ShareClickId = shareClickId;
            shareClick.ShareId = shareId;
            shareClick.DateAdded = dateAdded;
            return shareClick;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ShareClickId
        {
            get
            {
                return _ShareClickId;
            }
            set
            {
                if (_ShareClickId != value)
                {
                    OnShareClickIdChanging(value);
                    ReportPropertyChanging("ShareClickId");
                    _ShareClickId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ShareClickId");
                    OnShareClickIdChanged();
                }
            }
        }
        private global::System.Int32 _ShareClickId;
        partial void OnShareClickIdChanging(global::System.Int32 value);
        partial void OnShareClickIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ShareId
        {
            get
            {
                return _ShareId;
            }
            set
            {
                OnShareIdChanging(value);
                ReportPropertyChanging("ShareId");
                _ShareId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ShareId");
                OnShareIdChanged();
            }
        }
        private global::System.Int32 _ShareId;
        partial void OnShareIdChanging(global::System.Int32 value);
        partial void OnShareIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UserAgent
        {
            get
            {
                return _UserAgent;
            }
            set
            {
                OnUserAgentChanging(value);
                ReportPropertyChanging("UserAgent");
                _UserAgent = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UserAgent");
                OnUserAgentChanged();
            }
        }
        private global::System.String _UserAgent;
        partial void OnUserAgentChanging(global::System.String value);
        partial void OnUserAgentChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_ShareClick_Share", "Share")]
        public Share Share
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Share>("TipTraceModel.FK_ShareClick_Share", "Share").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Share>("TipTraceModel.FK_ShareClick_Share", "Share").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Share> ShareReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Share>("TipTraceModel.FK_ShareClick_Share", "Share");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Share>("TipTraceModel.FK_ShareClick_Share", "Share", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="ShareSession")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ShareSession : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ShareSession object.
        /// </summary>
        /// <param name="shareSessionId">Initial value of the ShareSessionId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="urlId">Initial value of the UrlId property.</param>
        /// <param name="message">Initial value of the Message property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        /// <param name="emailReward">Initial value of the EmailReward property.</param>
        /// <param name="emailUpdate">Initial value of the EmailUpdate property.</param>
        public static ShareSession CreateShareSession(global::System.Int32 shareSessionId, global::System.Int32 userId, global::System.Int32 urlId, global::System.String message, global::System.DateTime dateAdded, global::System.Boolean emailReward, global::System.Boolean emailUpdate)
        {
            ShareSession shareSession = new ShareSession();
            shareSession.ShareSessionId = shareSessionId;
            shareSession.UserId = userId;
            shareSession.UrlId = urlId;
            shareSession.Message = message;
            shareSession.DateAdded = dateAdded;
            shareSession.EmailReward = emailReward;
            shareSession.EmailUpdate = emailUpdate;
            return shareSession;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ShareSessionId
        {
            get
            {
                return _ShareSessionId;
            }
            set
            {
                if (_ShareSessionId != value)
                {
                    OnShareSessionIdChanging(value);
                    ReportPropertyChanging("ShareSessionId");
                    _ShareSessionId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ShareSessionId");
                    OnShareSessionIdChanged();
                }
            }
        }
        private global::System.Int32 _ShareSessionId;
        partial void OnShareSessionIdChanging(global::System.Int32 value);
        partial void OnShareSessionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UrlId
        {
            get
            {
                return _UrlId;
            }
            set
            {
                OnUrlIdChanging(value);
                ReportPropertyChanging("UrlId");
                _UrlId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UrlId");
                OnUrlIdChanged();
            }
        }
        private global::System.Int32 _UrlId;
        partial void OnUrlIdChanging(global::System.Int32 value);
        partial void OnUrlIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Message
        {
            get
            {
                return _Message;
            }
            set
            {
                OnMessageChanging(value);
                ReportPropertyChanging("Message");
                _Message = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Message");
                OnMessageChanged();
            }
        }
        private global::System.String _Message;
        partial void OnMessageChanging(global::System.String value);
        partial void OnMessageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ClientId
        {
            get
            {
                return _ClientId;
            }
            set
            {
                OnClientIdChanging(value);
                ReportPropertyChanging("ClientId");
                _ClientId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClientId");
                OnClientIdChanged();
            }
        }
        private Nullable<global::System.Int32> _ClientId;
        partial void OnClientIdChanging(Nullable<global::System.Int32> value);
        partial void OnClientIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean EmailReward
        {
            get
            {
                return _EmailReward;
            }
            set
            {
                OnEmailRewardChanging(value);
                ReportPropertyChanging("EmailReward");
                _EmailReward = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EmailReward");
                OnEmailRewardChanged();
            }
        }
        private global::System.Boolean _EmailReward;
        partial void OnEmailRewardChanging(global::System.Boolean value);
        partial void OnEmailRewardChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean EmailUpdate
        {
            get
            {
                return _EmailUpdate;
            }
            set
            {
                OnEmailUpdateChanging(value);
                ReportPropertyChanging("EmailUpdate");
                _EmailUpdate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EmailUpdate");
                OnEmailUpdateChanged();
            }
        }
        private global::System.Boolean _EmailUpdate;
        partial void OnEmailUpdateChanging(global::System.Boolean value);
        partial void OnEmailUpdateChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_Share_ShareSession", "Share")]
        public EntityCollection<Share> Shares
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Share>("TipTraceModel.FK_Share_ShareSession", "Share");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Share>("TipTraceModel.FK_Share_ShareSession", "Share", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_ShareSession_Url", "Url")]
        public Url Url
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Url>("TipTraceModel.FK_ShareSession_Url", "Url").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Url>("TipTraceModel.FK_ShareSession_Url", "Url").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Url> UrlReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Url>("TipTraceModel.FK_ShareSession_Url", "Url");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Url>("TipTraceModel.FK_ShareSession_Url", "Url", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_ShareSession_User", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("TipTraceModel.FK_ShareSession_User", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("TipTraceModel.FK_ShareSession_User", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("TipTraceModel.FK_ShareSession_User", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("TipTraceModel.FK_ShareSession_User", "User", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_ShareSession_Client", "Client")]
        public Client Client
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Client>("TipTraceModel.FK_ShareSession_Client", "Client").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Client>("TipTraceModel.FK_ShareSession_Client", "Client").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Client> ClientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Client>("TipTraceModel.FK_ShareSession_Client", "Client");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Client>("TipTraceModel.FK_ShareSession_Client", "Client", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="SourceType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SourceType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SourceType object.
        /// </summary>
        /// <param name="sourceTypeID">Initial value of the SourceTypeID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static SourceType CreateSourceType(global::System.Int32 sourceTypeID, global::System.String name)
        {
            SourceType sourceType = new SourceType();
            sourceType.SourceTypeID = sourceTypeID;
            sourceType.Name = name;
            return sourceType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SourceTypeID
        {
            get
            {
                return _SourceTypeID;
            }
            set
            {
                if (_SourceTypeID != value)
                {
                    OnSourceTypeIDChanging(value);
                    ReportPropertyChanging("SourceTypeID");
                    _SourceTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SourceTypeID");
                    OnSourceTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _SourceTypeID;
        partial void OnSourceTypeIDChanging(global::System.Int32 value);
        partial void OnSourceTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_Share_SourceType", "Share")]
        public EntityCollection<Share> Shares
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Share>("TipTraceModel.FK_Share_SourceType", "Share");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Share>("TipTraceModel.FK_Share_SourceType", "Share", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_UserSource_SourceType", "UserSource")]
        public EntityCollection<UserSource> UserSources
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserSource>("TipTraceModel.FK_UserSource_SourceType", "UserSource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserSource>("TipTraceModel.FK_UserSource_SourceType", "UserSource", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="Url")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Url : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Url object.
        /// </summary>
        /// <param name="urlId">Initial value of the UrlId property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        /// <param name="dateUpdated">Initial value of the DateUpdated property.</param>
        /// <param name="viewCount">Initial value of the ViewCount property.</param>
        public static Url CreateUrl(global::System.Int32 urlId, global::System.String value, global::System.DateTime dateAdded, global::System.DateTime dateUpdated, global::System.Int32 viewCount)
        {
            Url url = new Url();
            url.UrlId = urlId;
            url.Value = value;
            url.DateAdded = dateAdded;
            url.DateUpdated = dateUpdated;
            url.ViewCount = viewCount;
            return url;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UrlId
        {
            get
            {
                return _UrlId;
            }
            set
            {
                if (_UrlId != value)
                {
                    OnUrlIdChanging(value);
                    ReportPropertyChanging("UrlId");
                    _UrlId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UrlId");
                    OnUrlIdChanged();
                }
            }
        }
        private global::System.Int32 _UrlId;
        partial void OnUrlIdChanging(global::System.Int32 value);
        partial void OnUrlIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateUpdated
        {
            get
            {
                return _DateUpdated;
            }
            set
            {
                OnDateUpdatedChanging(value);
                ReportPropertyChanging("DateUpdated");
                _DateUpdated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateUpdated");
                OnDateUpdatedChanged();
            }
        }
        private global::System.DateTime _DateUpdated;
        partial void OnDateUpdatedChanging(global::System.DateTime value);
        partial void OnDateUpdatedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ViewCount
        {
            get
            {
                return _ViewCount;
            }
            set
            {
                OnViewCountChanging(value);
                ReportPropertyChanging("ViewCount");
                _ViewCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ViewCount");
                OnViewCountChanged();
            }
        }
        private global::System.Int32 _ViewCount;
        partial void OnViewCountChanging(global::System.Int32 value);
        partial void OnViewCountChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_ShareSession_Url", "ShareSession")]
        public EntityCollection<ShareSession> ShareSessions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ShareSession>("TipTraceModel.FK_ShareSession_Url", "ShareSession");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ShareSession>("TipTraceModel.FK_ShareSession_Url", "ShareSession", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_UrlView_Url", "UrlView")]
        public EntityCollection<UrlView> UrlViews
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UrlView>("TipTraceModel.FK_UrlView_Url", "UrlView");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UrlView>("TipTraceModel.FK_UrlView_Url", "UrlView", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="UrlView")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UrlView : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UrlView object.
        /// </summary>
        /// <param name="urlViewId">Initial value of the UrlViewId property.</param>
        /// <param name="urlId">Initial value of the UrlId property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        public static UrlView CreateUrlView(global::System.Int32 urlViewId, global::System.Int32 urlId, global::System.DateTime dateAdded)
        {
            UrlView urlView = new UrlView();
            urlView.UrlViewId = urlViewId;
            urlView.UrlId = urlId;
            urlView.DateAdded = dateAdded;
            return urlView;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UrlViewId
        {
            get
            {
                return _UrlViewId;
            }
            set
            {
                if (_UrlViewId != value)
                {
                    OnUrlViewIdChanging(value);
                    ReportPropertyChanging("UrlViewId");
                    _UrlViewId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UrlViewId");
                    OnUrlViewIdChanged();
                }
            }
        }
        private global::System.Int32 _UrlViewId;
        partial void OnUrlViewIdChanging(global::System.Int32 value);
        partial void OnUrlViewIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UrlId
        {
            get
            {
                return _UrlId;
            }
            set
            {
                OnUrlIdChanging(value);
                ReportPropertyChanging("UrlId");
                _UrlId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UrlId");
                OnUrlIdChanged();
            }
        }
        private global::System.Int32 _UrlId;
        partial void OnUrlIdChanging(global::System.Int32 value);
        partial void OnUrlIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ClientId
        {
            get
            {
                return _ClientId;
            }
            set
            {
                OnClientIdChanging(value);
                ReportPropertyChanging("ClientId");
                _ClientId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClientId");
                OnClientIdChanged();
            }
        }
        private Nullable<global::System.Int32> _ClientId;
        partial void OnClientIdChanging(Nullable<global::System.Int32> value);
        partial void OnClientIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_UrlView_Url", "Url")]
        public Url Url
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Url>("TipTraceModel.FK_UrlView_Url", "Url").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Url>("TipTraceModel.FK_UrlView_Url", "Url").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Url> UrlReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Url>("TipTraceModel.FK_UrlView_Url", "Url");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Url>("TipTraceModel.FK_UrlView_Url", "Url", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_UrlView_Client", "Client")]
        public Client Client
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Client>("TipTraceModel.FK_UrlView_Client", "Client").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Client>("TipTraceModel.FK_UrlView_Client", "Client").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Client> ClientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Client>("TipTraceModel.FK_UrlView_Client", "Client");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Client>("TipTraceModel.FK_UrlView_Client", "Client", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="userID">Initial value of the UserID property.</param>
        /// <param name="hash">Initial value of the Hash property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        public static User CreateUser(global::System.Int32 userID, global::System.String hash, global::System.DateTime dateAdded)
        {
            User user = new User();
            user.UserID = userID;
            user.Hash = hash;
            user.DateAdded = dateAdded;
            return user;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    OnUserIDChanging(value);
                    ReportPropertyChanging("UserID");
                    _UserID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        private global::System.Int32 _UserID;
        partial void OnUserIDChanging(global::System.Int32 value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Hash
        {
            get
            {
                return _Hash;
            }
            set
            {
                OnHashChanging(value);
                ReportPropertyChanging("Hash");
                _Hash = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Hash");
                OnHashChanged();
            }
        }
        private global::System.String _Hash;
        partial void OnHashChanging(global::System.String value);
        partial void OnHashChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateUpdated
        {
            get
            {
                return _DateUpdated;
            }
            set
            {
                OnDateUpdatedChanging(value);
                ReportPropertyChanging("DateUpdated");
                _DateUpdated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateUpdated");
                OnDateUpdatedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateUpdated;
        partial void OnDateUpdatedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateUpdatedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_ShareSession_User", "ShareSession")]
        public EntityCollection<ShareSession> ShareSessions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ShareSession>("TipTraceModel.FK_ShareSession_User", "ShareSession");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ShareSession>("TipTraceModel.FK_ShareSession_User", "ShareSession", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_UserSource_User", "UserSource")]
        public EntityCollection<UserSource> UserSources
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserSource>("TipTraceModel.FK_UserSource_User", "UserSource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserSource>("TipTraceModel.FK_UserSource_User", "UserSource", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipTraceModel", Name="UserSource")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserSource : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserSource object.
        /// </summary>
        /// <param name="userSourceID">Initial value of the UserSourceID property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="sourceTypeId">Initial value of the SourceTypeId property.</param>
        /// <param name="identifier">Initial value of the Identifier property.</param>
        /// <param name="token">Initial value of the Token property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        /// <param name="dateEdited">Initial value of the DateEdited property.</param>
        public static UserSource CreateUserSource(global::System.Int32 userSourceID, global::System.Int32 userId, global::System.Int32 sourceTypeId, global::System.String identifier, global::System.String token, global::System.DateTime dateAdded, global::System.DateTime dateEdited)
        {
            UserSource userSource = new UserSource();
            userSource.UserSourceID = userSourceID;
            userSource.UserId = userId;
            userSource.SourceTypeId = sourceTypeId;
            userSource.Identifier = identifier;
            userSource.Token = token;
            userSource.DateAdded = dateAdded;
            userSource.DateEdited = dateEdited;
            return userSource;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserSourceID
        {
            get
            {
                return _UserSourceID;
            }
            set
            {
                if (_UserSourceID != value)
                {
                    OnUserSourceIDChanging(value);
                    ReportPropertyChanging("UserSourceID");
                    _UserSourceID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserSourceID");
                    OnUserSourceIDChanged();
                }
            }
        }
        private global::System.Int32 _UserSourceID;
        partial void OnUserSourceIDChanging(global::System.Int32 value);
        partial void OnUserSourceIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SourceTypeId
        {
            get
            {
                return _SourceTypeId;
            }
            set
            {
                OnSourceTypeIdChanging(value);
                ReportPropertyChanging("SourceTypeId");
                _SourceTypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SourceTypeId");
                OnSourceTypeIdChanged();
            }
        }
        private global::System.Int32 _SourceTypeId;
        partial void OnSourceTypeIdChanging(global::System.Int32 value);
        partial void OnSourceTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Identifier
        {
            get
            {
                return _Identifier;
            }
            set
            {
                OnIdentifierChanging(value);
                ReportPropertyChanging("Identifier");
                _Identifier = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Identifier");
                OnIdentifierChanged();
            }
        }
        private global::System.String _Identifier;
        partial void OnIdentifierChanging(global::System.String value);
        partial void OnIdentifierChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Token
        {
            get
            {
                return _Token;
            }
            set
            {
                OnTokenChanging(value);
                ReportPropertyChanging("Token");
                _Token = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Token");
                OnTokenChanged();
            }
        }
        private global::System.String _Token;
        partial void OnTokenChanging(global::System.String value);
        partial void OnTokenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TokenSecret
        {
            get
            {
                return _TokenSecret;
            }
            set
            {
                OnTokenSecretChanging(value);
                ReportPropertyChanging("TokenSecret");
                _TokenSecret = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TokenSecret");
                OnTokenSecretChanged();
            }
        }
        private global::System.String _TokenSecret;
        partial void OnTokenSecretChanging(global::System.String value);
        partial void OnTokenSecretChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Verifier
        {
            get
            {
                return _Verifier;
            }
            set
            {
                OnVerifierChanging(value);
                ReportPropertyChanging("Verifier");
                _Verifier = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Verifier");
                OnVerifierChanged();
            }
        }
        private global::System.String _Verifier;
        partial void OnVerifierChanging(global::System.String value);
        partial void OnVerifierChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RefreshToken
        {
            get
            {
                return _RefreshToken;
            }
            set
            {
                OnRefreshTokenChanging(value);
                ReportPropertyChanging("RefreshToken");
                _RefreshToken = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RefreshToken");
                OnRefreshTokenChanged();
            }
        }
        private global::System.String _RefreshToken;
        partial void OnRefreshTokenChanging(global::System.String value);
        partial void OnRefreshTokenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateEdited
        {
            get
            {
                return _DateEdited;
            }
            set
            {
                OnDateEditedChanging(value);
                ReportPropertyChanging("DateEdited");
                _DateEdited = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateEdited");
                OnDateEditedChanged();
            }
        }
        private global::System.DateTime _DateEdited;
        partial void OnDateEditedChanging(global::System.DateTime value);
        partial void OnDateEditedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_UserSource_SourceType", "SourceType")]
        public SourceType SourceType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SourceType>("TipTraceModel.FK_UserSource_SourceType", "SourceType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SourceType>("TipTraceModel.FK_UserSource_SourceType", "SourceType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SourceType> SourceTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SourceType>("TipTraceModel.FK_UserSource_SourceType", "SourceType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SourceType>("TipTraceModel.FK_UserSource_SourceType", "SourceType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipTraceModel", "FK_UserSource_User", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("TipTraceModel.FK_UserSource_User", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("TipTraceModel.FK_UserSource_User", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("TipTraceModel.FK_UserSource_User", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("TipTraceModel.FK_UserSource_User", "User", value);
                }
            }
        }

        #endregion

    }

    #endregion

    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="TipTraceModel", Name="StatsResultDate")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class StatsResultDate : ComplexObject
    {
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Count
        {
            get
            {
                return _Count;
            }
            set
            {
                OnCountChanging(value);
                ReportPropertyChanging("Count");
                _Count = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Count");
                OnCountChanged();
            }
        }
        private Nullable<global::System.Int32> _Count;
        partial void OnCountChanging(Nullable<global::System.Int32> value);
        partial void OnCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Date;
        partial void OnDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="TipTraceModel", Name="StatsResultTop")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class StatsResultTop : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new StatsResultTop object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static StatsResultTop CreateStatsResultTop(global::System.Int32 id, global::System.String value)
        {
            StatsResultTop statsResultTop = new StatsResultTop();
            statsResultTop.Id = id;
            statsResultTop.Value = value;
            return statsResultTop;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Count
        {
            get
            {
                return _Count;
            }
            set
            {
                OnCountChanging(value);
                ReportPropertyChanging("Count");
                _Count = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Count");
                OnCountChanged();
            }
        }
        private Nullable<global::System.Int32> _Count;
        partial void OnCountChanging(Nullable<global::System.Int32> value);
        partial void OnCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                OnIdChanging(value);
                ReportPropertyChanging("Id");
                _Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Id");
                OnIdChanged();
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    }

    #endregion

    
}
